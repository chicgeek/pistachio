//
// Focus states
// ---
.tab-focus(@colour: @colour-accent) {
    outline: 4px solid @colour;
    outline-offset: 0;
    background-color: @colour;
    color: @colour-white;
    text-decoration: none;
}

.button-focus(@colour: @colour-accent) {
    outline: 2px auto @colour;
    outline-offset: -2px;
    .box-shadow(0 0 8px @colour-accent);
}

.form-control-focus(@colour: @colour-accent) {
    &:focus {
        border-color: @colour;
        outline: 4px auto @colour;
        outline-offset: -2px;
    }
}

//
// Buttons
// ---
.button-style(@colour: @colour-grey-lightest, @text: @colour-accent) {
    @colour-dark: darken(@colour, 5%);
    @colour-light: lighten(@colour, 8%);
    color: @text;
    border: 1px solid @colour-dark;
    #gradient > .vertical(@colour-light, @colour);
    border-radius: @dimension-border-radius;
    .box-shadow(inset 0 -.1em 0 @colour-dark);

    &:hover,
    &:focus {
        #gradient > .vertical(darken(@colour-light, 4%), @colour-dark);
        color: @text;
    }

    &:focus {
        .button-focus(@colour-dark);
    }

    &:active {
        .box-shadow(inset 0 1px 4px @colour-dark);
    }
}

.button-block() {
    display: block;
    width: 100%;
}

.button-block-reset() {
    display: inline-block;
    width: auto;
}

//
// Form states
// ---
.form-control-validation(@text-color: @text-color; @border-color: #ccc; @background-color: #f5f5f5) {
    // Color the label and help text
    label,
    .form-group__help-block,
    .radio,
    .checkbox,
    .radio-inline,
    .checkbox-inline,
    &.radio label,
    &.checkbox label,
    &.radio-inline label,
    &.checkbox-inline label  {
        color: @text-color;
    }

    // Set the border and box shadow on specific inputs to match
    .form-control {
        border-color: @border-color;
        .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work

        &:focus {
            border-color: darken(@border-color, 10%);
            @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);
            .box-shadow(@shadow);
        }
    }

    // Optional feedback icon
    .form-control-feedback {
        color: @text-color;
    }
}

//
// Responsive visibility
// ---
.responsive-visibility() {
    display: block !important;
    table&  { display: table !important; }
    tr&     { display: table-row !important; }
    th&,
    td&     { display: table-cell !important; }
}

.responsive-invisibility() {
    display: none !important;
}

//
// Hide text
// ---
.text-hide() {
    font: ~"0/0" a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

//
// Images
// ---
.img-responsive(@display: block) {
    display: @display;
    max-width: 100%; // Part 1: Set a maximum relative to the parent
    height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

//
// Icons
// ---
.icon() {
    font-family: "pistachio-icon-font";
    font-style: normal;
    font-weight: normal;
    speak: none;
    display: inline-block;
    text-decoration: inherit;
    width: 1em;
    margin-right: .2em;
    text-align: center;
    font-variant: normal;
    text-transform: none;
    line-height: 1em;
    margin-left: .2em;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

//
// Alert variants
// ---
.alert-variant(@icon-unicode, @background, @text-color) {
    color: @text-color;
    background-color: lighten(@background, 2.5%);
    color: @text-color;
    border-left: 6px solid darken(@background, 5%);

    a {
        color: darken(@text-color, 10%);

        &:focus,
        &:active {
            .tab-focus(@text-color);
        }
    }

    .close {
        color: darken(@text-color, 10%);

        &:hover,
        &:focus {
            background-color: @text-color;
            color: @colour-white;
        }
    }

    &:before {
        content: @icon-unicode;
    }
}
